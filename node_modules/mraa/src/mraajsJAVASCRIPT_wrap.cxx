/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifndef SWIG_V8_VERSION
#define SWIG_V8_VERSION 0x032871
#endif


#include <node.h>


#include <v8.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* ---------------------------------------------------------------------------
 * These typedefs and defines are used to deal with v8 API changes
 *
 * ---------------------------------------------------------------------------*/

// First v8 version that uses "SetWeak" and not "MakeWeak"

#define SWIGV8_SETWEAK_VERSION 0x032224

#if (SWIG_V8_VERSION < 0x031803)
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::New(cstr, len)
#else
#define SWIGV8_STRING_NEW2(cstr, len) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), cstr, v8::String::kNormalString, len)
#endif

#if (SWIG_V8_VERSION < 0x031903)
typedef v8::Handle<v8::Value> SwigV8ReturnValue;
typedef v8::Arguments SwigV8Arguments;
typedef v8::AccessorInfo SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) return scope.Close(val)
#define SWIGV8_RETURN_INFO(val, info) return scope.Close(val)
#else
typedef void SwigV8ReturnValue;
typedef v8::FunctionCallbackInfo<v8::Value> SwigV8Arguments;
typedef v8::PropertyCallbackInfo<v8::Value> SwigV8PropertyCallbackInfo;
#define SWIGV8_RETURN(val) args.GetReturnValue().Set(val); return
#define SWIGV8_RETURN_INFO(val, info) info.GetReturnValue().Set(val); return
#endif

#if (SWIG_V8_VERSION < 0x032117)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#elif (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Close(val)
#else
#define SWIGV8_HANDLESCOPE() v8::HandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_HANDLESCOPE_ESC() v8::EscapableHandleScope scope(v8::Isolate::GetCurrent());
#define SWIGV8_ESCAPE(val) return scope.Escape(val)
#endif

#if (SWIG_V8_VERSION < 0x032224)
#define SWIGV8_ADJUST_MEMORY(size) v8::V8::AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Context::GetCurrent()
#define SWIGV8_THROW_EXCEPTION(err) v8::ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::New(str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewSymbol(sym)
#else
#define SWIGV8_ADJUST_MEMORY(size) v8::Isolate::GetCurrent()->AdjustAmountOfExternalAllocatedMemory(size)
#define SWIGV8_CURRENT_CONTEXT() v8::Isolate::GetCurrent()->GetCurrentContext()
#define SWIGV8_THROW_EXCEPTION(err) v8::Isolate::GetCurrent()->ThrowException(err)
#define SWIGV8_STRING_NEW(str) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), str)
#define SWIGV8_SYMBOL_NEW(sym) v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), sym)
#endif

#if (SWIG_V8_VERSION < 0x032318)
#define SWIGV8_ARRAY_NEW() v8::Array::New()
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New()
#define SWIGV8_INT32_NEW(num) v8::Int32::New(num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(num)
#define SWIGV8_OBJECT_NEW() v8::Object::New()
#define SWIGV8_UNDEFINED() v8::Undefined()
#define SWIGV8_NULL() v8::Null()
#else
#define SWIGV8_ARRAY_NEW() v8::Array::New(v8::Isolate::GetCurrent())
#define SWIGV8_BOOLEAN_NEW(bool) v8::Boolean::New(v8::Isolate::GetCurrent(), bool)
#define SWIGV8_EXTERNAL_NEW(val) v8::External::New(v8::Isolate::GetCurrent(), val)
#define SWIGV8_FUNCTEMPLATE_NEW(func) v8::FunctionTemplate::New(v8::Isolate::GetCurrent(), func)
#define SWIGV8_FUNCTEMPLATE_NEW_VOID() v8::FunctionTemplate::New(v8::Isolate::GetCurrent())
#define SWIGV8_INT32_NEW(num) v8::Int32::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW(num) v8::Integer::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_INTEGER_NEW_UNS(num) v8::Integer::NewFromUnsigned(v8::Isolate::GetCurrent(), num)
#define SWIGV8_NUMBER_NEW(num) v8::Number::New(v8::Isolate::GetCurrent(), num)
#define SWIGV8_OBJECT_NEW() v8::Object::New(v8::Isolate::GetCurrent())
#define SWIGV8_UNDEFINED() v8::Undefined(v8::Isolate::GetCurrent())
#define SWIGV8_NULL() v8::Null(v8::Isolate::GetCurrent())
#endif

#if (SWIG_V8_VERSION < 0x031710)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(class);
#elif (SWIG_V8_VERSION < 0x031900)
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ = v8::Persistent<v8::FunctionTemplate>::New(v8::Isolate::GetCurrent(), class);
#else
#define SWIGV8_SET_CLASS_TEMPL(class_templ, class) class_templ.Reset(v8::Isolate::GetCurrent(), class);
#endif

/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

static void SWIG_V8_Raise(const char *msg) {
  SWIGV8_THROW_EXCEPTION(v8::Exception::Error(SWIGV8_STRING_NEW(msg)));
}

/*
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.

  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload',
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual ~V8ErrorHandler() {}
  virtual void error(int code, const char *msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
static V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char *msg) {
    err = v8::Exception::Error(SWIGV8_STRING_NEW(msg));
    if(code != SWIG_TypeError) {
        SWIGV8_THROW_EXCEPTION(err);
    }
  }
  v8::Handle<v8::Value> err;
};

/* ---------------------------------------------------------------------------
 * Basic Proxy object
 *
 * ---------------------------------------------------------------------------*/

// Note: to trigger the v8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    SWIGV8_ADJUST_MEMORY(SWIGV8_AVG_OBJ_SIZE);
  };

  ~SWIGV8_Proxy() {
#if (SWIG_V8_VERSION < 0x031710)
    handle.ClearWeak();
    handle.Dispose();
#elif (SWIG_V8_VERSION < 0x032100)
    handle.ClearWeak(v8::Isolate::GetCurrent());
    handle.Dispose(v8::Isolate::GetCurrent());
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.ClearWeak();
    handle.Dispose();
#else    
    handle.ClearWeak();
    handle.Reset();
#endif

#if (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    handle.Clear();
#endif

    SWIGV8_ADJUST_MEMORY(-SWIGV8_AVG_OBJ_SIZE);
  }

  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
  v8::Persistent<v8::Object> handle;
};

class SWIGV8_ClientData {
public:
  v8::Persistent<v8::FunctionTemplate> class_templ;

#if (SWIG_V8_VERSION < 0x031710)
  void (*dtor) (v8::Persistent< v8::Value> object, void *parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Value> object, void *parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  void (*dtor) (v8::Isolate *isolate, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy);
#else
  void (*dtor) (const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data);
#endif
};

static v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

static int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(cdata->info, info);
    if (!tc && cdata->info->name) {
      tc = SWIG_TypeCheck(cdata->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}


#if (SWIG_V8_VERSION < 0x031710)
static void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
static void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void SWIGV8_Proxy_DefaultDtor(v8::Isolate *, v8::Persistent< v8::Object > *object, SWIGV8_Proxy *proxy) {
#else
static void SWIGV8_Proxy_DefaultDtor(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
  SWIGV8_Proxy *proxy = data.GetParameter();
#endif

  delete proxy;
}

static int SWIG_V8_GetInstancePtr(v8::Handle<v8::Value> valRef, void **ptr) {
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();

  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;

#if (SWIG_V8_VERSION < 0x031511)
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(v8::External::Unwrap(cdataRef));
#else
  SWIGV8_Proxy *cdata = static_cast<SWIGV8_Proxy *>(objRef->GetAlignedPointerFromInternalField(0));
#endif

  if(cdata == NULL) {
    return SWIG_ERROR;
  }

  *ptr = cdata->swigCObject;

  return SWIG_OK;
}

static void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void *ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy *cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;

#if (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  // clientdata must be set for owned data as we need to register the dtor
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (SWIG_V8_VERSION < 0x031918)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, SWIGV8_Proxy_DefaultDtor);
  }
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#else
  if(cdata->swigCMemOwn && (SWIGV8_ClientData*)info->clientdata) {
    cdata->handle.SetWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    cdata->handle.SetWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

}

static int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void **ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE();
  
  /* special case: JavaScript null => C NULL pointer */
  if(valRef->IsNull()) {
    *ptr=0;
    return SWIG_OK;
  }
  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

static v8::Handle<v8::Value> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  SWIGV8_HANDLESCOPE_ESC();
  
  v8::Handle<v8::FunctionTemplate> class_templ;

  if (ptr == NULL) {
#if (SWIG_V8_VERSION < 0x031903)
    SWIGV8_ESCAPE(SWIGV8_NULL());
#else    
    v8::Local<v8::Primitive> result = SWIGV8_NULL();
    SWIGV8_ESCAPE(result);
#endif    
  }

#if (SWIG_V8_VERSION < 0x031903)
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
#else
  v8::Isolate *isolate = v8::Isolate::GetCurrent();

  if(info->clientdata != 0) {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, ((SWIGV8_ClientData*) info->clientdata)->class_templ);
  } else {
    class_templ = v8::Local<v8::FunctionTemplate>::New(isolate, SWIGV8_SWIGTYPE_Proxy_class_templ);
  }
#endif

//  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  v8::Local<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);

  SWIGV8_ESCAPE(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)    SWIG_V8_GetInstancePtr(obj, ptr)

static SwigV8ReturnValue _SWIGV8_wrap_equals(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(args[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult =  SWIGV8_BOOLEAN_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

static SwigV8ReturnValue _wrap_getCPtr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(args.Holder(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = SWIGV8_NUMBER_NEW(result);

  SWIGV8_RETURN(jsresult);
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

/* ---------------------------------------------------------------------------
 * PackedData object
 *
 * ---------------------------------------------------------------------------*/

class SwigV8PackedData {
public:
  SwigV8PackedData(void *data, size_t size, swig_type_info *type): data(data), size(size), type(type) {};

  ~SwigV8PackedData() {
  };

  void *data;
  size_t size;
  swig_type_info *type;

  v8::Persistent<v8::Object> handle;
};

SWIGRUNTIMEINLINE
int SwigV8Packed_Check(v8::Handle<v8::Value> valRef) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  if(objRef->InternalFieldCount() < 1) return false;
  v8::Handle<v8::Value> flag = objRef->GetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"));
  return (flag->IsBoolean() && flag->BooleanValue());
}

SWIGRUNTIME
swig_type_info *SwigV8Packed_UnpackData(v8::Handle<v8::Value> valRef, void *ptr, size_t size) {
  if (SwigV8Packed_Check(valRef)) {
    SWIGV8_HANDLESCOPE();
    
    SwigV8PackedData *sobj;

    v8::Handle<v8::Object> objRef = valRef->ToObject();

#if (SWIG_V8_VERSION < 0x031511)
    v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
    sobj = static_cast<SwigV8PackedData*>(v8::External::Unwrap(cdataRef));
#else
    sobj = static_cast<SwigV8PackedData*>(objRef->GetAlignedPointerFromInternalField(0));
#endif
    if (sobj == NULL || sobj->size != size) return 0;
    memcpy(ptr, sobj->data, size);
    return sobj->type;
  } else {
    return 0;
  }
}

SWIGRUNTIME
int SWIGV8_ConvertPacked(v8::Handle<v8::Value> valRef, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigV8Packed_UnpackData(valRef, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}

#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_SwigV8PackedData_delete(v8::Persistent< v8::Value > object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
static void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
  SwigV8PackedData *cdata = static_cast<SwigV8PackedData *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
static void _wrap_SwigV8PackedData_delete(v8::Isolate *isolate, v8::Persistent<v8::Object> *object, SwigV8PackedData *cdata) {
#else
static void _wrap_SwigV8PackedData_delete(const v8::WeakCallbackData<v8::Object, SwigV8PackedData> &data) {
  v8::Local<v8::Object> object = data.GetValue();
  SwigV8PackedData *cdata = data.GetParameter();
#endif

  delete cdata;

#if (SWIG_V8_VERSION < 0x031710)
  object.Clear();
  object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
  object.Clear();
  object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
  object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  object->Dispose();
#else
  object.Clear();
#endif
}

SWIGRUNTIME
v8::Handle<v8::Value> SWIGV8_NewPackedObj(void *data, size_t size, swig_type_info *type) {
  SWIGV8_HANDLESCOPE_ESC();

  SwigV8PackedData *cdata = new SwigV8PackedData(data, size, type);
//  v8::Handle<v8::Object> obj = SWIGV8_OBJECT_NEW();
  v8::Local<v8::Object> obj = SWIGV8_OBJECT_NEW();

  obj->SetHiddenValue(SWIGV8_STRING_NEW("__swig__packed_data__"), SWIGV8_BOOLEAN_NEW(true));

#if (SWIG_V8_VERSION < 0x031511)
  obj->SetPointerInInternalField(0, cdata);
#else
  obj->SetAlignedPointerInInternalField(0, cdata);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle = v8::Persistent<v8::Object>::New(obj);
#elif (SWIG_V8_VERSION < 0x031900)
  cdata->handle = v8::Persistent<v8::Object>::New(v8::Isolate::GetCurrent(), obj);
#else
  cdata->handle.Reset(v8::Isolate::GetCurrent(), obj);
#endif


#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#elif (SWIG_V8_VERSION < 0x031918)
  cdata->handle.MakeWeak(v8::Isolate::GetCurrent(), cdata, _wrap_SwigV8PackedData_delete);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
  cdata->handle.MakeWeak(cdata, _wrap_SwigV8PackedData_delete);
#else
  cdata->handle.SetWeak(cdata, _wrap_SwigV8PackedData_delete);
//  v8::V8::SetWeak(&cdata->handle, cdata, _wrap_SwigV8PackedData_delete);
#endif

#if (SWIG_V8_VERSION < 0x031710)
  cdata->handle.MarkIndependent();
#elif (SWIG_V8_VERSION < 0x032100)
  cdata->handle.MarkIndependent(v8::Isolate::GetCurrent());
#else
  cdata->handle.MarkIndependent();
#endif

  SWIGV8_ESCAPE(obj);
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIGV8_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIGV8_NewPackedObj(ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

#if (SWIG_V8_VERSION < 0x031903)
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Handle<v8::Value> result, v8::Handle<v8::Value> obj) {
#else
v8::Handle<v8::Value> SWIGV8_AppendOutput(v8::Local<v8::Value> result, v8::Handle<v8::Value> obj) {
#endif
  SWIGV8_HANDLESCOPE_ESC();
  
  if (result->IsUndefined()) {
    result = SWIGV8_ARRAY_NEW();
  }
#if (SWIG_V8_VERSION < 0x031903)
  v8::Handle<v8::Array> arr = v8::Handle<v8::Array>::Cast(result);
#else  
  v8::Local<v8::Array> arr = v8::Local<v8::Array>::Cast(result);
#endif  
  arr->Set(arr->Length(), obj);

  SWIGV8_ESCAPE(arr);
}



// Note: since 3.19 there are new CallBack types, since 03.21.9 the old ones have been removed
#if (SWIG_V8_VERSION < 0x031903)
typedef v8::InvocationCallback  SwigV8FunctionCallback;
typedef v8::AccessorGetter      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetter      SwigV8AccessorSetterCallback;
typedef v8::AccessorInfo        SwigV8PropertyCallbackInfoVoid;
#else
typedef v8::FunctionCallback            SwigV8FunctionCallback;
typedef v8::AccessorGetterCallback      SwigV8AccessorGetterCallback;
typedef v8::AccessorSetterCallback      SwigV8AccessorSetterCallback;
typedef v8::PropertyCallbackInfo<void>  SwigV8PropertyCallbackInfoVoid;
#endif

/**
 * Creates a class template for a class with specified initialization function.
 */
SWIGRUNTIME v8::Handle<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    SWIGV8_HANDLESCOPE_ESC();
    
    v8::Local<v8::FunctionTemplate> class_templ = SWIGV8_FUNCTEMPLATE_NEW_VOID();
    class_templ->SetClassName(SWIGV8_SYMBOL_NEW(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    v8::Handle<v8::ObjectTemplate> equals_templ = class_templ->PrototypeTemplate();
    equals_templ->Set(SWIGV8_SYMBOL_NEW("equals"), SWIGV8_FUNCTEMPLATE_NEW(_SWIGV8_wrap_equals));

    v8::Handle<v8::ObjectTemplate> cptr_templ = class_templ->PrototypeTemplate();
    cptr_templ->Set(SWIGV8_SYMBOL_NEW("getCPtr"), SWIGV8_FUNCTEMPLATE_NEW(_wrap_getCPtr));

    SWIGV8_ESCAPE(class_templ);
}

/**
 * Registers a class method with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8FunctionCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func));
}

/**
 * Registers a class property with given name for a given class template.
 */
SWIGRUNTIME void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol,
  const SwigV8FunctionCallback& _func) {
  obj->Set(SWIGV8_SYMBOL_NEW(symbol), SWIGV8_FUNCTEMPLATE_NEW(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object.
 */
SWIGRUNTIME void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol,
  SwigV8AccessorGetterCallback getter, SwigV8AccessorSetterCallback setter) {
  obj->SetAccessor(SWIGV8_SYMBOL_NEW(symbol), getter, setter);
}

SWIGRUNTIME void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value,
  const SwigV8PropertyCallbackInfoVoid& info)
{
    char buffer[256];
    char msg[512];
    int res;

    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);

    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_int swig_types[1]
#define SWIGTYPE_p_long_long swig_types[2]
#define SWIGTYPE_p_mraa__Aio swig_types[3]
#define SWIGTYPE_p_mraa__Dir swig_types[4]
#define SWIGTYPE_p_mraa__Edge swig_types[5]
#define SWIGTYPE_p_mraa__Gpio swig_types[6]
#define SWIGTYPE_p_mraa__I2c swig_types[7]
#define SWIGTYPE_p_mraa__Mode swig_types[8]
#define SWIGTYPE_p_mraa__Pwm swig_types[9]
#define SWIGTYPE_p_mraa__Spi swig_types[10]
#define SWIGTYPE_p_mraa__Spi_Mode swig_types[11]
#define SWIGTYPE_p_mraa__Uart swig_types[12]
#define SWIGTYPE_p_mraa_i2c_mode_t swig_types[13]
#define SWIGTYPE_p_mraa_intel_edison_miniboard_t swig_types[14]
#define SWIGTYPE_p_mraa_intel_edison_t swig_types[15]
#define SWIGTYPE_p_mraa_pinmodes_t swig_types[16]
#define SWIGTYPE_p_mraa_platform_t swig_types[17]
#define SWIGTYPE_p_mraa_raspberry_wiring_t swig_types[18]
#define SWIGTYPE_p_mraa_result_t swig_types[19]
#define SWIGTYPE_p_mraa_uart_parity_t swig_types[20]
#define SWIGTYPE_p_short swig_types[21]
#define SWIGTYPE_p_signed_char swig_types[22]
#define SWIGTYPE_p_uint8Array swig_types[23]
#define SWIGTYPE_p_unsigned_char swig_types[24]
#define SWIGTYPE_p_unsigned_int swig_types[25]
#define SWIGTYPE_p_unsigned_long_long swig_types[26]
#define SWIGTYPE_p_unsigned_short swig_types[27]
#define SWIGTYPE_p_uv_work_t swig_types[28]
#define SWIGTYPE_p_v8__HandleT_v8__Function_t swig_types[29]
static swig_type_info *swig_types[31];
static swig_module_info swig_module = {swig_types, 30, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x030005 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>


typedef uint8_t uint8Array;


SWIGINTERN
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();

  return SWIG_OK;
}

SWIGINTERN uint8Array *new_uint8Array(int nelements){
  return new uint8_t[nelements];
}
SWIGINTERN uint8_t uint8Array_getitem(uint8Array *self,int index){
  return self[index];
}

SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return SWIGV8_NUMBER_NEW(value);
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    SWIGV8_INTEGER_NEW_UNS(value) : SWIGV8_INTEGER_NEW((long)(value));
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();

  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }

  long longVal = (long) obj->NumberValue();

  if(longVal < 0) {
      return SWIG_OverflowError;
  }

  if(val) *val = longVal;

  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (v8::Handle<v8::Value> obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}

SWIGINTERN void uint8Array_setitem(uint8Array *self,int index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *uint8Array_cast(uint8Array *self){
  return self;
}
SWIGINTERN uint8Array *uint8Array_frompointer(uint8_t *t){
  return (uint8Array *) t;
}

  #include <node_buffer.h>


#include <stdint.h>		// Use the C99 official header


#include <string>


    #include "common.hpp"
    #include "gpio.hpp"
    #include "pwm.hpp"
    #include "i2c.hpp"
    #include "spi.hpp"
    #include "aio.hpp"
    #include "uart.hpp"


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return SWIGV8_INT32_NEW(value);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return SWIGV8_UNDEFINED();
    } else {
      v8::Handle<v8::String> js_str = SWIGV8_STRING_NEW2(carray, size);
      return js_str;
    }
  } else {
    return SWIGV8_UNDEFINED();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value>
SWIG_From_bool  (bool value)
{
  return SWIGV8_BOOLEAN_NEW(value);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN
int SWIG_AsVal_long (v8::Handle<v8::Value> obj, long* val)
{
  if (!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = (long) obj->IntegerValue();

  return SWIG_OK;
}


SWIGINTERN
int SWIG_AsVal_bool (v8::Handle<v8::Value> obj, bool *val)
{
  if(!obj->IsBoolean()) {
    return SWIG_ERROR;
  }

  if (val) *val = obj->BooleanValue();
  return SWIG_OK;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (v8::Handle<v8::Value> obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned short)(v);
    }
  }  
  return res;
}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (v8::Handle<v8::Value> obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (float)(v);
    }
  }  
  return res;
}


SWIGINTERN
v8::Handle<v8::Value> SWIG_From_double   (double val)
{
  return SWIGV8_NUMBER_NEW(val);
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}


SWIGINTERN int
SWIG_AsPtr_std_string (v8::Handle<v8::Value> obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}





#define SWIGV8_INIT mraa_initialize


SWIGV8_ClientData _exports_uint8Array_clientData;
SWIGV8_ClientData _exports_Gpio_clientData;
SWIGV8_ClientData _exports_I2c_clientData;
SWIGV8_ClientData _exports_Pwm_clientData;
SWIGV8_ClientData _exports_Spi_clientData;
SWIGV8_ClientData _exports_Aio_clientData;
SWIGV8_ClientData _exports_Uart_clientData;


static SwigV8ReturnValue _wrap_new_uint8Array(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  uint8Array *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_uint8Array.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_uint8Array" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  result = (uint8Array *)new_uint8Array(arg1);
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_uint8Array, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}

SWIGINTERN void delete_uint8Array(uint8Array *self){
  delete [] self;
}

#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_uint8Array(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_uint8Array(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_uint8Array(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_uint8Array(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          uint8Array * arg1 = (uint8Array *)proxy->swigCObject;
          delete_uint8Array(arg1);
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_uint8Array_getitem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8Array *arg1 = (uint8Array *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_getitem.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_getitem" "', argument " "1"" of type '" "uint8Array *""'"); 
  }
  arg1 = (uint8Array *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint8Array_getitem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  result = (uint8_t)uint8Array_getitem(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_uint8Array_setitem(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8Array *arg1 = (uint8Array *) 0 ;
  int arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_setitem.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_setitem" "', argument " "1"" of type '" "uint8Array *""'"); 
  }
  arg1 = (uint8Array *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint8Array_setitem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint8Array_setitem" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  uint8Array_setitem(arg1,arg2,arg3);
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_uint8Array_cast(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8Array *arg1 = (uint8Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_cast.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_cast" "', argument " "1"" of type '" "uint8Array *""'"); 
  }
  arg1 = (uint8Array *)(argp1);
  result = (uint8_t *)uint8Array_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_uint8Array_frompointer(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8Array *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_uint8Array_frompointer.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint8Array_frompointer" "', argument " "1"" of type '" "uint8_t *""'"); 
  }
  arg1 = (uint8_t *)(argp1);
  result = (uint8Array *)uint8Array_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_uint8Array, 0 |  0 );
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_init(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa_result_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_init.");
  
  {
    try {
      result = (mraa_result_t)mraa::init();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getVersion(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getVersion.");
  
  {
    try {
      result = mraa::getVersion();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_std_string((std::string)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_setPriority(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_setPriority.");
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setPriority" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = (unsigned int)(val1);
  {
    try {
      result = (int)mraa::setPriority(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getPlatformType(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa_platform_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getPlatformType.");
  
  {
    try {
      result = (mraa_platform_t)mraa::getPlatformType();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_printError(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa_result_t arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_printError.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "printError" "', argument " "1"" of type '" "mraa_result_t""'");
  } 
  arg1 = (mraa_result_t)(val1);
  {
    try {
      mraa::printError(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_pinModeTest(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  mraa_pinmodes_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_pinModeTest.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pinModeTest" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pinModeTest" "', argument " "2"" of type '" "mraa_pinmodes_t""'");
  } 
  arg2 = (mraa_pinmodes_t)(val2);
  {
    try {
      result = (bool)mraa::pinModeTest(arg1,arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_adcRawBits(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_adcRawBits.");
  
  {
    try {
      result = (unsigned int)mraa::adcRawBits();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_adcSupportedBits(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_adcSupportedBits.");
  
  {
    try {
      result = (unsigned int)mraa::adcSupportedBits();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getPlatformName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getPlatformName.");
  
  {
    try {
      result = mraa::getPlatformName();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_std_string((std::string)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getPinCount(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  unsigned int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getPinCount.");
  
  {
    try {
      result = (unsigned int)mraa::getPinCount();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_getPinName(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_getPinName.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getPinName" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = mraa::getPinName(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_setLogLevel(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_setLogLevel.");
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setLogLevel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (mraa_result_t)mraa::setLogLevel(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_GALILEO_GEN1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_GALILEO_GEN1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_GALILEO_GEN2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_GALILEO_GEN2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_FAB_C(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_FAB_C));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_DE3815(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_DE3815));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_MINNOWBOARD_MAX(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_MINNOWBOARD_MAX));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_PI(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_PI));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_BEAGLEBONE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_BEAGLEBONE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_BANANA(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_BANANA));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_UNKNOWN_PLATFORM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_UNKNOWN_PLATFORM));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_7(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_7));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_9(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_9));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_10(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_11(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_12(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_14(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J17_14));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_6(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_7(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_7));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_10(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_11(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_12(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_13(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J18_13));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_6(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_9(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_9));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_10(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_11(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_12(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_13(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_13));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_14(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J19_14));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_3(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_6(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_7(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_7));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_9(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_9));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_10(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_11(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_12(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_13(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_13));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_14(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_MINIBOARD_J20_14));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP182(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP182));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP135(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP135));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP27(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP27));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP20(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP28(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP28));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP111(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP111));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP109(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP109));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP115(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP115));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP128(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP128));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP13(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP13));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP165(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP165));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP19(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP19));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP12(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP183(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP183));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP110(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP110));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP114(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP114));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP129(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP129));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP130(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP130));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP44(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP44));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP46(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP46));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP48(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP48));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP131(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP131));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP14(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP14));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP40(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP40));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP43(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP43));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP77(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP77));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP82(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP82));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP83(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP83));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP134(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP134));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP45(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP45));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP47(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP47));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP49(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP49));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP15(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP15));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP84(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP84));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP42(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP42));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP41(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP41));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP78(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP78));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP79(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP79));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP80(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP80));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_INTEL_EDISON_GP81(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_INTEL_EDISON_GP81));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN8(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN8));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN9(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN9));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN7(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN7));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN15(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN15));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN16(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN16));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN0(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN3(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN4(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN4));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN5(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN5));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN12(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN12));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN13(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN13));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN6(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN6));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN14(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN14));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN10(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN10));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN11(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN11));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN17(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN17));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN21(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN21));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN18(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN18));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN19(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN19));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN22(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN22));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN20(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN20));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN26(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN26));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN23(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN23));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN24(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN24));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN27(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN27));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN25(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN25));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN28(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN28));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_RASPBERRY_WIRING_PIN29(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_RASPBERRY_WIRING_PIN29));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_SUCCESS(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_SUCCESS));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_FEATURE_NOT_IMPLEMENTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_FEATURE_NOT_IMPLEMENTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_FEATURE_NOT_SUPPORTED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_FEATURE_NOT_SUPPORTED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_INVALID_VERBOSITY_LEVEL(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_INVALID_VERBOSITY_LEVEL));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_INVALID_PARAMETER(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_INVALID_PARAMETER));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_INVALID_HANDLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_INVALID_HANDLE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_NO_RESOURCES(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_NO_RESOURCES));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_INVALID_RESOURCE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_INVALID_RESOURCE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_INVALID_QUEUE_TYPE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_INVALID_QUEUE_TYPE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_NO_DATA_AVAILABLE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_NO_DATA_AVAILABLE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_INVALID_PLATFORM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_INVALID_PLATFORM));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_PLATFORM_NOT_INITIALISED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_PLATFORM_NOT_INITIALISED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_PLATFORM_ALREADY_INITIALISED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_PLATFORM_ALREADY_INITIALISED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_ERROR_UNSPECIFIED(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_ERROR_UNSPECIFIED));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_VALID(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_VALID));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_GPIO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_GPIO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_PWM(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_PWM));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_FAST_GPIO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_FAST_GPIO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_SPI(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_SPI));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_I2C(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_I2C));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_AIO(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_AIO));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_PIN_UART(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_PIN_UART));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_I2C_STD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_I2C_STD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_I2C_FAST(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_I2C_FAST));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_I2C_HIGH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_I2C_HIGH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_UART_PARITY_NONE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_UART_PARITY_NONE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_UART_PARITY_EVEN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_UART_PARITY_EVEN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_UART_PARITY_ODD(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_UART_PARITY_ODD));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_UART_PARITY_MARK(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_UART_PARITY_MARK));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_MRAA_UART_PARITY_SPACE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(MRAA_UART_PARITY_SPACE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_MODE_STRONG(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::MODE_STRONG));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_MODE_PULLUP(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::MODE_PULLUP));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_MODE_PULLDOWN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::MODE_PULLDOWN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_MODE_HIZ(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::MODE_HIZ));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_DIR_OUT(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::DIR_OUT));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_DIR_IN(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::DIR_IN));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_DIR_OUT_HIGH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::DIR_OUT_HIGH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_DIR_OUT_LOW(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::DIR_OUT_LOW));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_EDGE_NONE(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::EDGE_NONE));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_EDGE_BOTH(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::EDGE_BOTH));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_EDGE_RISING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::EDGE_RISING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_EDGE_FALLING(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::EDGE_FALLING));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Gpio__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  bool arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mraa::Gpio *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Gpio__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Gpio" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Gpio" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Gpio" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  {
    try {
      result = (mraa::Gpio *)new mraa::Gpio(arg1,arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Gpio, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Gpio__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa::Gpio *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Gpio__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Gpio" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Gpio" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (mraa::Gpio *)new mraa::Gpio(arg1,arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Gpio, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Gpio__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mraa::Gpio *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Gpio__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Gpio" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (mraa::Gpio *)new mraa::Gpio(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Gpio, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Gpio(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Gpio__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Gpio__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Gpio__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Gpio__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Gpio__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Gpio__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Gpio");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Gpio(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Gpio(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Gpio(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Gpio(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          mraa::Gpio * arg1 = (mraa::Gpio *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Gpio_edge(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  mraa::Edge arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_edge.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_edge" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_edge" "', argument " "2"" of type '" "mraa::Edge""'");
  } 
  arg2 = (mraa::Edge)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->edge(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_v8isr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uv_work_t *arg1 = (uv_work_t *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_v8isr.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_uv_work_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_v8isr" "', argument " "1"" of type '" "uv_work_t *""'"); 
  }
  arg1 = (uv_work_t *)(argp1);
  ecode2 = SWIG_AsVal_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_v8isr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      mraa::Gpio::v8isr(arg1,arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_nop(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  uv_work_t *arg1 = (uv_work_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_nop.");
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_uv_work_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_nop" "', argument " "1"" of type '" "uv_work_t *""'"); 
  }
  arg1 = (uv_work_t *)(argp1);
  {
    try {
      mraa::Gpio::nop(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_uvwork(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  void *arg1 = (void *) 0 ;
  int res1 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_uvwork.");
  
  res1 = SWIG_ConvertPtr(args[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_uvwork" "', argument " "1"" of type '" "void *""'"); 
  }
  {
    try {
      mraa::Gpio::uvwork(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIGV8_UNDEFINED();
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_isr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  mraa::Edge arg2 ;
  v8::Handle< v8::Function > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_isr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_isr" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_isr" "', argument " "2"" of type '" "mraa::Edge""'");
  } 
  arg2 = (mraa::Edge)(val2);
  {
    arg3 = v8::Local<v8::Function>::Cast(args[1]);
  }
  {
    try {
      result = (mraa_result_t)(arg1)->isr(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_isrExit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_isrExit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_isrExit" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  {
    try {
      result = (mraa_result_t)(arg1)->isrExit();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_mode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  mraa::Mode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_mode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_mode" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_mode" "', argument " "2"" of type '" "mraa::Mode""'");
  } 
  arg2 = (mraa::Mode)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->mode(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_dir(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  mraa::Dir arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_dir.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_dir" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_dir" "', argument " "2"" of type '" "mraa::Dir""'");
  } 
  arg2 = (mraa::Dir)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->dir(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_read(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_read.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_read" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  {
    try {
      result = (int)(arg1)->read();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_write" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_write" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->write(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_useMmap(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Gpio_useMmap.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_useMmap" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_useMmap" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->useMmap(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_getPin__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_getPin" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Gpio_getPin" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (int)(arg1)->getPin(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio_getPin__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Gpio *arg1 = (mraa::Gpio *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Gpio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gpio_getPin" "', argument " "1"" of type '" "mraa::Gpio *""'"); 
  }
  arg1 = (mraa::Gpio *)(argp1);
  {
    try {
      result = (int)(arg1)->getPin();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Gpio__wrap_Gpio_getPin(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Gpio_getPin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Gpio_getPin__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Gpio_getPin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Gpio_getPin__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function getPin.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_I2c__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa::I2c *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_I2c__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_I2c" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_I2c" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (mraa::I2c *)new mraa::I2c(arg1,arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__I2c, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_I2c__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mraa::I2c *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_I2c__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_I2c" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (mraa::I2c *)new mraa::I2c(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__I2c, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_I2c(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_I2c__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_I2c__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_I2c__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_I2c__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_I2c");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_I2c(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_I2c(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_I2c(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_I2c(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          mraa::I2c * arg1 = (mraa::I2c *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_I2c_frequency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  mraa_i2c_mode_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_frequency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_frequency" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_frequency" "', argument " "2"" of type '" "mraa_i2c_mode_t""'");
  } 
  arg2 = (mraa_i2c_mode_t)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->frequency(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_address(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_address.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_address" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_address" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->address(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_readByte(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_readByte.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_readByte" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  {
    try {
      result = (uint8_t)(arg1)->readByte();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_read(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_read.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_read" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  {
    int x;
    int ecode = SWIG_AsVal_int(args[0], &x);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "Expected an int");
    }
    arg3 = x;
    if (arg3 < 0) {
      SWIG_exception_fail(SWIG_ERROR, "Positive integer expected");
      SWIGV8_RETURN(SWIGV8_UNDEFINED());
    }
    arg2 = (uint8_t*) malloc(arg3 * sizeof(uint8_t));
  }
  {
    try {
      result = (int)(arg1)->read(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  {
    if (result < 0) {
      /* Check for I/O error */
      free(arg2);
      SWIG_exception_fail(SWIG_ERROR, "I2c write failed");
      SWIGV8_RETURN(SWIGV8_UNDEFINED());
    }
#if SWIG_V8_VERSION > 0x032870
    jsresult = node::Buffer::New((char*) arg2, result);
#else
    jsresult = node::Buffer::New((char*) arg2, result)->handle_;
#endif
    free(arg2);
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_readReg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  uint8_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_readReg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_readReg" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_readReg" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      result = (uint8_t)(arg1)->readReg(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_readWordReg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  uint16_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_readWordReg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_readWordReg" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_readWordReg" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      result = (uint16_t)(arg1)->readWordReg(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_readBytesReg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_readBytesReg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_readBytesReg" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_readBytesReg" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    int x;
    int ecode = SWIG_AsVal_int(args[1], &x);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "Expected an int");
    }
    arg4 = x;
    if (arg4 < 0) {
      SWIG_exception_fail(SWIG_ERROR, "Positive integer expected");
      SWIGV8_RETURN(SWIGV8_UNDEFINED());
    }
    arg3 = (uint8_t*) malloc(arg4 * sizeof(uint8_t));
  }
  {
    try {
      result = (int)(arg1)->readBytesReg(arg2,arg3,arg4);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  {
    if (result < 0) {
      /* Check for I/O error */
      free(arg3);
      SWIG_exception_fail(SWIG_ERROR, "I2c write failed");
      SWIGV8_RETURN(SWIGV8_UNDEFINED());
    }
#if SWIG_V8_VERSION > 0x032870
    jsresult = node::Buffer::New((char*) arg3, result);
#else
    jsresult = node::Buffer::New((char*) arg3, result)->handle_;
#endif
    free(arg3);
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_writeByte(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_writeByte.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_writeByte" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_writeByte" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->writeByte(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_write" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  {
    if (!node::Buffer::HasInstance(args[0])) {
      SWIG_exception_fail(SWIG_ERROR, "Expected a node Buffer");
    }
    arg2 = (uint8_t*) node::Buffer::Data(args[0]);
    arg3 = node::Buffer::Length(args[0]);
  }
  {
    try {
      result = (mraa_result_t)(arg1)->write((uint8_t const *)arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_writeReg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_writeReg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_writeReg" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_writeReg" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "I2c_writeReg" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = (uint8_t)(val3);
  {
    try {
      result = (mraa_result_t)(arg1)->writeReg(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_I2c_writeWordReg(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::I2c *arg1 = (mraa::I2c *) 0 ;
  uint8_t arg2 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_I2c_writeWordReg.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__I2c, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "I2c_writeWordReg" "', argument " "1"" of type '" "mraa::I2c *""'"); 
  }
  arg1 = (mraa::I2c *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "I2c_writeWordReg" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_short(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "I2c_writeWordReg" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = (uint16_t)(val3);
  {
    try {
      result = (mraa_result_t)(arg1)->writeWordReg(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Pwm__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  bool arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  mraa::Pwm *result;
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pwm__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pwm" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pwm" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pwm" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  {
    try {
      result = (mraa::Pwm *)new mraa::Pwm(arg1,arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Pwm, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Pwm__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  bool arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa::Pwm *result;
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pwm__SWIG_1.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pwm" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  ecode2 = SWIG_AsVal_bool(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pwm" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (mraa::Pwm *)new mraa::Pwm(arg1,arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Pwm, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Pwm__SWIG_2(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mraa::Pwm *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Pwm__SWIG_2.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pwm" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (mraa::Pwm *)new mraa::Pwm(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Pwm, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Pwm(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 3) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Pwm__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Pwm__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 2) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Pwm__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Pwm__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Pwm__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Pwm__SWIG_2(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Pwm");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Pwm(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Pwm(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Pwm(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Pwm(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          mraa::Pwm * arg1 = (mraa::Pwm *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Pwm_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_write" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_write" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->write(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_read(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_read.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_read" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  {
    try {
      result = (float)(arg1)->read();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_period" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_period" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->period(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_period_ms(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_period_ms.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_period_ms" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_period_ms" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->period_ms(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_period_us(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_period_us.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_period_us" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_period_us" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->period_us(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_pulsewidth(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_pulsewidth.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_pulsewidth" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_float(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_pulsewidth" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = (float)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->pulsewidth(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_pulsewidth_ms(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_pulsewidth_ms.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_pulsewidth_ms" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_pulsewidth_ms" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->pulsewidth_ms(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_pulsewidth_us(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_pulsewidth_us.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_pulsewidth_us" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_pulsewidth_us" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->pulsewidth_us(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_enable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_enable.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_enable" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_enable" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->enable(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_config_ms(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_config_ms.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_config_ms" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_config_ms" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pwm_config_ms" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  {
    try {
      result = (mraa_result_t)(arg1)->config_ms(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_config_percent(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  int arg2 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_config_percent.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_config_percent" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pwm_config_percent" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_float(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pwm_config_percent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = (float)(val3);
  {
    try {
      result = (mraa_result_t)(arg1)->config_percent(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_max_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_max_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_max_period" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  {
    try {
      result = (int)(arg1)->max_period();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Pwm_min_period(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Pwm *arg1 = (mraa::Pwm *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Pwm_min_period.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Pwm, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pwm_min_period" "', argument " "1"" of type '" "mraa::Pwm *""'"); 
  }
  arg1 = (mraa::Pwm *)(argp1);
  {
    try {
      result = (int)(arg1)->min_period();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_mraa_SPI_MODE0(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::SPI_MODE0));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_SPI_MODE1(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::SPI_MODE1));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_SPI_MODE2(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::SPI_MODE2));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_mraa_SPI_MODE3(v8::Local<v8::String> property, const SwigV8PropertyCallbackInfo &info) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(mraa::SPI_MODE3));
  
  SWIGV8_RETURN_INFO(jsresult, info);
  
  goto fail;
fail:
  SWIGV8_RETURN_INFO(SWIGV8_UNDEFINED(), info);
}


static SwigV8ReturnValue _wrap_new_Spi(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mraa::Spi *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Spi.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Spi" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (mraa::Spi *)new mraa::Spi(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Spi, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Spi(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Spi(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Spi(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Spi(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          mraa::Spi * arg1 = (mraa::Spi *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Spi_mode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Spi *arg1 = (mraa::Spi *) 0 ;
  mraa::Spi_Mode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Spi_mode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Spi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spi_mode" "', argument " "1"" of type '" "mraa::Spi *""'"); 
  }
  arg1 = (mraa::Spi *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spi_mode" "', argument " "2"" of type '" "mraa::Spi_Mode""'");
  } 
  arg2 = (mraa::Spi_Mode)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->mode(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Spi_frequency(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Spi *arg1 = (mraa::Spi *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Spi_frequency.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Spi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spi_frequency" "', argument " "1"" of type '" "mraa::Spi *""'"); 
  }
  arg1 = (mraa::Spi *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spi_frequency" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->frequency(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Spi_writeByte(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Spi *arg1 = (mraa::Spi *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Spi_writeByte.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Spi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spi_writeByte" "', argument " "1"" of type '" "mraa::Spi *""'"); 
  }
  arg1 = (mraa::Spi *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spi_writeByte" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  {
    try {
      result = (int)(arg1)->writeByte(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Spi_write_word(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Spi *arg1 = (mraa::Spi *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  uint16_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Spi_write_word.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Spi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spi_write_word" "', argument " "1"" of type '" "mraa::Spi *""'"); 
  }
  arg1 = (mraa::Spi *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spi_write_word" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = (uint16_t)(val2);
  {
    try {
      result = (uint16_t)(arg1)->write_word(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_unsigned_SS_short((unsigned short)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Spi_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Spi *arg1 = (mraa::Spi *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Spi_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Spi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spi_write" "', argument " "1"" of type '" "mraa::Spi *""'"); 
  }
  arg1 = (mraa::Spi *)(argp1);
  {
    if (!node::Buffer::HasInstance(args[0])) {
      SWIG_exception_fail(SWIG_ERROR, "Expected a node Buffer");
    }
    arg2 = (uint8_t*) node::Buffer::Data(args[0]);
    arg3 = node::Buffer::Length(args[0]);
  }
  {
    try {
      result = (uint8_t *)(arg1)->write(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  {
#if SWIG_V8_VERSION > 0x032870
    jsresult = node::Buffer::New((char*) result, arg3);
#else
    jsresult = node::Buffer::New((char*) result, arg3)->handle_;
#endif
  }
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Spi_lsbmode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Spi *arg1 = (mraa::Spi *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Spi_lsbmode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Spi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spi_lsbmode" "', argument " "1"" of type '" "mraa::Spi *""'"); 
  }
  arg1 = (mraa::Spi *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spi_lsbmode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->lsbmode(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Spi_bitPerWord(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Spi *arg1 = (mraa::Spi *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Spi_bitPerWord.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Spi, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Spi_bitPerWord" "', argument " "1"" of type '" "mraa::Spi *""'"); 
  }
  arg1 = (mraa::Spi *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Spi_bitPerWord" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->bitPerWord(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Aio(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  mraa::Aio *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Aio.");
  ecode1 = SWIG_AsVal_unsigned_SS_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Aio" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = (unsigned int)(val1);
  {
    try {
      result = (mraa::Aio *)new mraa::Aio(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Aio, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Aio(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Aio(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Aio(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Aio(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          mraa::Aio * arg1 = (mraa::Aio *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Aio_read(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Aio *arg1 = (mraa::Aio *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Aio_read.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Aio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Aio_read" "', argument " "1"" of type '" "mraa::Aio *""'"); 
  }
  arg1 = (mraa::Aio *)(argp1);
  {
    try {
      result = (int)(arg1)->read();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Aio_readFloat(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Aio *arg1 = (mraa::Aio *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Aio_readFloat.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Aio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Aio_readFloat" "', argument " "1"" of type '" "mraa::Aio *""'"); 
  }
  arg1 = (mraa::Aio *)(argp1);
  {
    try {
      result = (float)(arg1)->readFloat();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_float((float)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Aio_setBit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Aio *arg1 = (mraa::Aio *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Aio_setBit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Aio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Aio_setBit" "', argument " "1"" of type '" "mraa::Aio *""'"); 
  }
  arg1 = (mraa::Aio *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Aio_setBit" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->setBit(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Aio_getBit(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Aio *arg1 = (mraa::Aio *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Aio_getBit.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Aio, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Aio_getBit" "', argument " "1"" of type '" "mraa::Aio *""'"); 
  }
  arg1 = (mraa::Aio *)(argp1);
  {
    try {
      result = (int)(arg1)->getBit();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Uart__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  mraa::Uart *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Uart__SWIG_0.");
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Uart" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = (int)(val1);
  {
    try {
      result = (mraa::Uart *)new mraa::Uart(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Uart, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Uart__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> self = args.Holder();
  std::string arg1 ;
  mraa::Uart *result;
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Uart__SWIG_1.");
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Uart" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (mraa::Uart *)new mraa::Uart(arg1);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_mraa__Uart, SWIG_POINTER_OWN);
  SWIGV8_RETURN(self);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_new_Uart(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  OverloadErrorHandler errorHandler;
  v8::Handle<v8::Value> self;
  
  // switch all cases by means of series of if-returns.
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Uart__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Uart__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    self = _wrap_new_Uart__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(self);
    }
#else
    _wrap_new_Uart__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  // default:
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for construction of _exports_Uart");
  
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


#if (SWIG_V8_VERSION < 0x031710)
static void _wrap_delete_Uart(v8::Persistent<v8::Value> object, void *parameter) {
  SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < 0x031900)
  static void _wrap_delete_Uart(v8::Isolate *isolate, v8::Persistent<v8::Value> object, void *parameter) {
    SWIGV8_Proxy *proxy = static_cast<SWIGV8_Proxy *>(parameter);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
    static void _wrap_delete_Uart(v8::Isolate *isolate, v8::Persistent< v8::Object> *object, SWIGV8_Proxy *proxy) {
#else
      static void _wrap_delete_Uart(const v8::WeakCallbackData<v8::Object, SWIGV8_Proxy> &data) {
        v8::Local<v8::Object> object = data.GetValue();
        SWIGV8_Proxy *proxy = data.GetParameter();
#endif
        
        if(proxy->swigCMemOwn && proxy->swigCObject) {
          mraa::Uart * arg1 = (mraa::Uart *)proxy->swigCObject;
          delete arg1;
        }
        delete proxy;
        
#if (SWIG_V8_VERSION < 0x031710)
        object.Dispose();
#elif (SWIG_V8_VERSION < 0x031900)
        object.Dispose(isolate);
#elif (SWIG_V8_VERSION < 0x032100)
        object->Dispose(isolate);
#elif (SWIG_V8_VERSION < SWIGV8_SETWEAK_VERSION)
        object->Dispose();
#else
        object.Clear();
#endif
      }


static SwigV8ReturnValue _wrap_Uart_getDevicePath(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_getDevicePath.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_getDevicePath" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  {
    try {
      result = (arg1)->getDevicePath();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_read(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_read.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_read" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  {
    int x;
    int ecode = SWIG_AsVal_int(args[0], &x);
    if (!SWIG_IsOK(ecode)) {
      SWIG_exception_fail(SWIG_ArgError(ecode), "Expected an int");
    }
    arg3 = x;
    if (arg3 < 0) {
      SWIG_exception_fail(SWIG_ERROR, "Positive integer expected");
      SWIGV8_RETURN(SWIGV8_UNDEFINED());
    }
    arg2 = (char*) malloc(arg3 * sizeof(uint8_t));
  }
  {
    try {
      result = (int)(arg1)->read(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  {
    if (result < 0) {
      /* Check for I/O error */
      free(arg2);
      SWIG_exception_fail(SWIG_ERROR, "I2c write failed");
      SWIGV8_RETURN(SWIGV8_UNDEFINED());
    }
#if SWIG_V8_VERSION > 0x032870
    jsresult = node::Buffer::New((char*) arg2, result);
#else
    jsresult = node::Buffer::New((char*) arg2, result)->handle_;
#endif
    free(arg2);
  }
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_write(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_write.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_write" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  {
    if (!node::Buffer::HasInstance(args[0])) {
      SWIG_exception_fail(SWIG_ERROR, "Expected a node Buffer");
    }
    arg2 = (char*) node::Buffer::Data(args[0]);
    arg3 = node::Buffer::Length(args[0]);
  }
  {
    try {
      result = (int)(arg1)->write((char const *)arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_readStr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::string result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_readStr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_readStr" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uart_readStr" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  {
    try {
      result = (arg1)->readStr(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_std_string((std::string)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_writeStr(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_writeStr.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_writeStr" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(args[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Uart_writeStr" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (int)(arg1)->writeStr(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_dataAvailable__SWIG_0(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_dataAvailable" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uart_dataAvailable" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  {
    try {
      result = (bool)(arg1)->dataAvailable(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_dataAvailable__SWIG_1(const SwigV8Arguments &args, V8ErrorHandler &SWIGV8_ErrorHandler)
{
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_dataAvailable" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  {
    try {
      result = (bool)(arg1)->dataAvailable();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_bool((bool)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart__wrap_Uart_dataAvailable(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  OverloadErrorHandler errorHandler;
  
  
  if(args.Length() == 1) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Uart_dataAvailable__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Uart_dataAvailable__SWIG_0(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  if(args.Length() == 0) {
    errorHandler.err.Clear();
#if (SWIG_V8_VERSION < 0x031903)
    jsresult = _wrap_Uart_dataAvailable__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      SWIGV8_ESCAPE(jsresult);
    }
#else
    _wrap_Uart_dataAvailable__SWIG_1(args, errorHandler);
    if(errorHandler.err.IsEmpty()) {
      return;
    }
#endif
  }
  
  
  SWIG_exception_fail(SWIG_ERROR, "Illegal arguments for function dataAvailable.");
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_flush(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_flush.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_flush" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  {
    try {
      result = (mraa_result_t)(arg1)->flush();
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_setBaudRate(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_setBaudRate.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_setBaudRate" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uart_setBaudRate" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  {
    try {
      result = (mraa_result_t)(arg1)->setBaudRate(arg2);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_setMode(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  int arg2 ;
  mraa_uart_parity_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_setMode.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_setMode" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uart_setMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Uart_setMode" "', argument " "3"" of type '" "mraa_uart_parity_t""'");
  } 
  arg3 = (mraa_uart_parity_t)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Uart_setMode" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    try {
      result = (mraa_result_t)(arg1)->setMode(arg2,arg3,arg4);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_setFlowcontrol(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  bool arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_setFlowcontrol.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_setFlowcontrol" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  ecode2 = SWIG_AsVal_bool(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uart_setFlowcontrol" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = (bool)(val2);
  ecode3 = SWIG_AsVal_bool(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Uart_setFlowcontrol" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = (bool)(val3);
  {
    try {
      result = (mraa_result_t)(arg1)->setFlowcontrol(arg2,arg3);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


static SwigV8ReturnValue _wrap_Uart_setTimeout(const SwigV8Arguments &args) {
  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Value> jsresult;
  mraa::Uart *arg1 = (mraa::Uart *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  mraa_result_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_Uart_setTimeout.");
  
  res1 = SWIG_ConvertPtr(args.Holder(), &argp1,SWIGTYPE_p_mraa__Uart, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uart_setTimeout" "', argument " "1"" of type '" "mraa::Uart *""'"); 
  }
  arg1 = (mraa::Uart *)(argp1);
  ecode2 = SWIG_AsVal_int(args[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uart_setTimeout" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = (int)(val2);
  ecode3 = SWIG_AsVal_int(args[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Uart_setTimeout" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  ecode4 = SWIG_AsVal_int(args[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Uart_setTimeout" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = (int)(val4);
  {
    try {
      result = (mraa_result_t)(arg1)->setTimeout(arg2,arg3,arg4);
    } catch(const std::invalid_argument& e) {
      SWIG_exception(SWIG_ValueError, e.what());
    } catch(...) {
      SWIG_exception(SWIG_RuntimeError, "Unknown exception");
    }
  }
  jsresult = SWIG_From_int((int)(result));
  
  
  
  
  
  SWIGV8_RETURN(jsresult);
  
  goto fail;
fail:
  SWIGV8_RETURN(SWIGV8_UNDEFINED());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Aio = {"_p_mraa__Aio", "p_mraa__Aio|mraa::Aio *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Dir = {"_p_mraa__Dir", "enum mraa::Dir *|mraa::Dir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Edge = {"_p_mraa__Edge", "enum mraa::Edge *|mraa::Edge *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Gpio = {"_p_mraa__Gpio", "p_mraa__Gpio|mraa::Gpio *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__I2c = {"_p_mraa__I2c", "mraa::I2c *|p_mraa__I2c", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Mode = {"_p_mraa__Mode", "enum mraa::Mode *|mraa::Mode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Pwm = {"_p_mraa__Pwm", "p_mraa__Pwm|mraa::Pwm *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Spi = {"_p_mraa__Spi", "mraa::Spi *|p_mraa__Spi", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Spi_Mode = {"_p_mraa__Spi_Mode", "enum mraa::Spi_Mode *|mraa::Spi_Mode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa__Uart = {"_p_mraa__Uart", "mraa::Uart *|p_mraa__Uart", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_i2c_mode_t = {"_p_mraa_i2c_mode_t", "enum mraa_i2c_mode_t *|mraa_i2c_mode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_intel_edison_miniboard_t = {"_p_mraa_intel_edison_miniboard_t", "enum mraa_intel_edison_miniboard_t *|mraa_intel_edison_miniboard_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_intel_edison_t = {"_p_mraa_intel_edison_t", "enum mraa_intel_edison_t *|mraa_intel_edison_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_pinmodes_t = {"_p_mraa_pinmodes_t", "enum mraa_pinmodes_t *|mraa_pinmodes_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_platform_t = {"_p_mraa_platform_t", "enum mraa_platform_t *|mraa_platform_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_raspberry_wiring_t = {"_p_mraa_raspberry_wiring_t", "enum mraa_raspberry_wiring_t *|mraa_raspberry_wiring_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_result_t = {"_p_mraa_result_t", "enum mraa_result_t *|mraa_result_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mraa_uart_parity_t = {"_p_mraa_uart_parity_t", "enum mraa_uart_parity_t *|mraa_uart_parity_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8Array = {"_p_uint8Array", "uint8Array *|p_uint8Array", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uv_work_t = {"_p_uv_work_t", "uv_work_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_v8__HandleT_v8__Function_t = {"_p_v8__HandleT_v8__Function_t", "v8::Handle< v8::Function > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_mraa__Aio,
  &_swigt__p_mraa__Dir,
  &_swigt__p_mraa__Edge,
  &_swigt__p_mraa__Gpio,
  &_swigt__p_mraa__I2c,
  &_swigt__p_mraa__Mode,
  &_swigt__p_mraa__Pwm,
  &_swigt__p_mraa__Spi,
  &_swigt__p_mraa__Spi_Mode,
  &_swigt__p_mraa__Uart,
  &_swigt__p_mraa_i2c_mode_t,
  &_swigt__p_mraa_intel_edison_miniboard_t,
  &_swigt__p_mraa_intel_edison_t,
  &_swigt__p_mraa_pinmodes_t,
  &_swigt__p_mraa_platform_t,
  &_swigt__p_mraa_raspberry_wiring_t,
  &_swigt__p_mraa_result_t,
  &_swigt__p_mraa_uart_parity_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_uint8Array,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_uv_work_t,
  &_swigt__p_v8__HandleT_v8__Function_t,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Aio[] = {  {&_swigt__p_mraa__Aio, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Dir[] = {  {&_swigt__p_mraa__Dir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Edge[] = {  {&_swigt__p_mraa__Edge, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Gpio[] = {  {&_swigt__p_mraa__Gpio, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__I2c[] = {  {&_swigt__p_mraa__I2c, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Mode[] = {  {&_swigt__p_mraa__Mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Pwm[] = {  {&_swigt__p_mraa__Pwm, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Spi[] = {  {&_swigt__p_mraa__Spi, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Spi_Mode[] = {  {&_swigt__p_mraa__Spi_Mode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa__Uart[] = {  {&_swigt__p_mraa__Uart, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_i2c_mode_t[] = {  {&_swigt__p_mraa_i2c_mode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_intel_edison_miniboard_t[] = {  {&_swigt__p_mraa_intel_edison_miniboard_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_intel_edison_t[] = {  {&_swigt__p_mraa_intel_edison_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_pinmodes_t[] = {  {&_swigt__p_mraa_pinmodes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_platform_t[] = {  {&_swigt__p_mraa_platform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_raspberry_wiring_t[] = {  {&_swigt__p_mraa_raspberry_wiring_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_result_t[] = {  {&_swigt__p_mraa_result_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mraa_uart_parity_t[] = {  {&_swigt__p_mraa_uart_parity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8Array[] = {  {&_swigt__p_uint8Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uv_work_t[] = {  {&_swigt__p_uv_work_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_v8__HandleT_v8__Function_t[] = {  {&_swigt__p_v8__HandleT_v8__Function_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_mraa__Aio,
  _swigc__p_mraa__Dir,
  _swigc__p_mraa__Edge,
  _swigc__p_mraa__Gpio,
  _swigc__p_mraa__I2c,
  _swigc__p_mraa__Mode,
  _swigc__p_mraa__Pwm,
  _swigc__p_mraa__Spi,
  _swigc__p_mraa__Spi_Mode,
  _swigc__p_mraa__Uart,
  _swigc__p_mraa_i2c_mode_t,
  _swigc__p_mraa_intel_edison_miniboard_t,
  _swigc__p_mraa_intel_edison_t,
  _swigc__p_mraa_pinmodes_t,
  _swigc__p_mraa_platform_t,
  _swigc__p_mraa_raspberry_wiring_t,
  _swigc__p_mraa_result_t,
  _swigc__p_mraa_uart_parity_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_uint8Array,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_uv_work_t,
  _swigc__p_v8__HandleT_v8__Function_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




#include <assert.h>

SWIGRUNTIME void
SWIG_V8_SetModule(void *, swig_module_info *swig_module) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::External> mod = SWIGV8_EXTERNAL_NEW(swig_module);
  assert(!mod.IsEmpty());
  global_obj->SetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"), mod);
}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void *) {
  v8::Local<v8::Object> global_obj = SWIGV8_CURRENT_CONTEXT()->Global();
  v8::Local<v8::Value> moduleinfo = global_obj->GetHiddenValue(SWIGV8_STRING_NEW("swig_module_info_data"));

  if (moduleinfo.IsEmpty())
  {
    // It's not yet loaded
    return 0;
  }

  v8::Local<v8::External> moduleinfo_extern = v8::Local<v8::External>::Cast(moduleinfo);

  if (moduleinfo_extern.IsEmpty())
  {
    // Something's not right
    return 0;
  }

  void *ptr = moduleinfo_extern->Value();
  assert(ptr);
  swig_module_info *retptr = static_cast<swig_module_info *>(ptr);
  assert(retptr);
  return retptr;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(clientdata, pointer)


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


// Note: 'extern "C"'' disables name mangling which makes it easier to load the symbol manually
// TODO: is it ok to do that?
extern "C"
#if (NODE_MODULE_VERSION < 0x000C)
void SWIGV8_INIT (v8::Handle<v8::Object> exports)
#else
void SWIGV8_INIT (v8::Handle<v8::Object> exports, v8::Handle<v8::Object> /*module*/)
#endif
{
  SWIG_InitializeModule(static_cast<void *>(&exports));

  SWIGV8_HANDLESCOPE();
  
  v8::Handle<v8::Object> exports_obj = exports;


    //Adding mraa_init() to the module initialisation process
    mraa_init();


  // a class template for creating proxies of undefined types
  SWIGV8_SET_CLASS_TEMPL(SWIGV8_SWIGTYPE_Proxy_class_templ, SWIGV8_CreateClassTemplate("SwigProxy"));

  /* create objects for namespaces */
  

  /* create class templates */
  /* Name: _exports_uint8Array, Type: p_uint8Array, Dtor: _wrap_delete_uint8Array */
v8::Handle<v8::FunctionTemplate> _exports_uint8Array_class = SWIGV8_CreateClassTemplate("_exports_uint8Array");
SWIGV8_SET_CLASS_TEMPL(_exports_uint8Array_clientData.class_templ, _exports_uint8Array_class);
_exports_uint8Array_clientData.dtor = _wrap_delete_uint8Array;
if (SWIGTYPE_p_uint8Array->clientdata == 0) {
  SWIGTYPE_p_uint8Array->clientdata = &_exports_uint8Array_clientData;
}
/* Name: _exports_Gpio, Type: p_mraa__Gpio, Dtor: _wrap_delete_Gpio */
v8::Handle<v8::FunctionTemplate> _exports_Gpio_class = SWIGV8_CreateClassTemplate("_exports_Gpio");
SWIGV8_SET_CLASS_TEMPL(_exports_Gpio_clientData.class_templ, _exports_Gpio_class);
_exports_Gpio_clientData.dtor = _wrap_delete_Gpio;
if (SWIGTYPE_p_mraa__Gpio->clientdata == 0) {
  SWIGTYPE_p_mraa__Gpio->clientdata = &_exports_Gpio_clientData;
}
/* Name: _exports_I2c, Type: p_mraa__I2c, Dtor: _wrap_delete_I2c */
v8::Handle<v8::FunctionTemplate> _exports_I2c_class = SWIGV8_CreateClassTemplate("_exports_I2c");
SWIGV8_SET_CLASS_TEMPL(_exports_I2c_clientData.class_templ, _exports_I2c_class);
_exports_I2c_clientData.dtor = _wrap_delete_I2c;
if (SWIGTYPE_p_mraa__I2c->clientdata == 0) {
  SWIGTYPE_p_mraa__I2c->clientdata = &_exports_I2c_clientData;
}
/* Name: _exports_Pwm, Type: p_mraa__Pwm, Dtor: _wrap_delete_Pwm */
v8::Handle<v8::FunctionTemplate> _exports_Pwm_class = SWIGV8_CreateClassTemplate("_exports_Pwm");
SWIGV8_SET_CLASS_TEMPL(_exports_Pwm_clientData.class_templ, _exports_Pwm_class);
_exports_Pwm_clientData.dtor = _wrap_delete_Pwm;
if (SWIGTYPE_p_mraa__Pwm->clientdata == 0) {
  SWIGTYPE_p_mraa__Pwm->clientdata = &_exports_Pwm_clientData;
}
/* Name: _exports_Spi, Type: p_mraa__Spi, Dtor: _wrap_delete_Spi */
v8::Handle<v8::FunctionTemplate> _exports_Spi_class = SWIGV8_CreateClassTemplate("_exports_Spi");
SWIGV8_SET_CLASS_TEMPL(_exports_Spi_clientData.class_templ, _exports_Spi_class);
_exports_Spi_clientData.dtor = _wrap_delete_Spi;
if (SWIGTYPE_p_mraa__Spi->clientdata == 0) {
  SWIGTYPE_p_mraa__Spi->clientdata = &_exports_Spi_clientData;
}
/* Name: _exports_Aio, Type: p_mraa__Aio, Dtor: _wrap_delete_Aio */
v8::Handle<v8::FunctionTemplate> _exports_Aio_class = SWIGV8_CreateClassTemplate("_exports_Aio");
SWIGV8_SET_CLASS_TEMPL(_exports_Aio_clientData.class_templ, _exports_Aio_class);
_exports_Aio_clientData.dtor = _wrap_delete_Aio;
if (SWIGTYPE_p_mraa__Aio->clientdata == 0) {
  SWIGTYPE_p_mraa__Aio->clientdata = &_exports_Aio_clientData;
}
/* Name: _exports_Uart, Type: p_mraa__Uart, Dtor: _wrap_delete_Uart */
v8::Handle<v8::FunctionTemplate> _exports_Uart_class = SWIGV8_CreateClassTemplate("_exports_Uart");
SWIGV8_SET_CLASS_TEMPL(_exports_Uart_clientData.class_templ, _exports_Uart_class);
_exports_Uart_clientData.dtor = _wrap_delete_Uart;
if (SWIGTYPE_p_mraa__Uart->clientdata == 0) {
  SWIGTYPE_p_mraa__Uart->clientdata = &_exports_Uart_clientData;
}


  /* register wrapper functions */
  SWIGV8_AddMemberFunction(_exports_uint8Array_class, "getitem", _wrap_uint8Array_getitem);
SWIGV8_AddMemberFunction(_exports_uint8Array_class, "setitem", _wrap_uint8Array_setitem);
SWIGV8_AddMemberFunction(_exports_uint8Array_class, "cast", _wrap_uint8Array_cast);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_GALILEO_GEN1", _wrap_MRAA_INTEL_GALILEO_GEN1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_GALILEO_GEN2", _wrap_MRAA_INTEL_GALILEO_GEN2, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_FAB_C", _wrap_MRAA_INTEL_EDISON_FAB_C, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_DE3815", _wrap_MRAA_INTEL_DE3815, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_MINNOWBOARD_MAX", _wrap_MRAA_INTEL_MINNOWBOARD_MAX, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_PI", _wrap_MRAA_RASPBERRY_PI, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "BEAGLEBONE", _wrap_MRAA_BEAGLEBONE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "BANANA", _wrap_MRAA_BANANA, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "UNKNOWN_PLATFORM", _wrap_MRAA_UNKNOWN_PLATFORM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_1", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_5", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_7", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_7, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_8", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_9", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_9, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_10", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_10, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_11", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_11, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_12", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_12, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J17_14", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J17_14, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_1", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_2", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_2, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_6", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_6, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_7", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_7, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_8", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_10", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_10, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_11", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_11, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_12", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_12, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J18_13", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J18_13, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_4", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_5", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_6", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_6, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_8", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_9", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_9, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_10", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_10, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_11", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_11, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_12", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_12, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_13", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_13, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J19_14", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J19_14, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_3", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_3, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_4", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_5", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_6", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_6, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_7", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_7, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_8", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_9", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_9, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_10", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_10, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_11", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_11, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_12", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_12, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_13", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_13, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_MINIBOARD_J20_14", _wrap_MRAA_INTEL_EDISON_MINIBOARD_J20_14, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP182", _wrap_MRAA_INTEL_EDISON_GP182, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP135", _wrap_MRAA_INTEL_EDISON_GP135, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP27", _wrap_MRAA_INTEL_EDISON_GP27, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP20", _wrap_MRAA_INTEL_EDISON_GP20, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP28", _wrap_MRAA_INTEL_EDISON_GP28, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP111", _wrap_MRAA_INTEL_EDISON_GP111, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP109", _wrap_MRAA_INTEL_EDISON_GP109, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP115", _wrap_MRAA_INTEL_EDISON_GP115, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP128", _wrap_MRAA_INTEL_EDISON_GP128, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP13", _wrap_MRAA_INTEL_EDISON_GP13, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP165", _wrap_MRAA_INTEL_EDISON_GP165, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP19", _wrap_MRAA_INTEL_EDISON_GP19, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP12", _wrap_MRAA_INTEL_EDISON_GP12, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP183", _wrap_MRAA_INTEL_EDISON_GP183, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP110", _wrap_MRAA_INTEL_EDISON_GP110, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP114", _wrap_MRAA_INTEL_EDISON_GP114, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP129", _wrap_MRAA_INTEL_EDISON_GP129, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP130", _wrap_MRAA_INTEL_EDISON_GP130, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP44", _wrap_MRAA_INTEL_EDISON_GP44, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP46", _wrap_MRAA_INTEL_EDISON_GP46, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP48", _wrap_MRAA_INTEL_EDISON_GP48, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP131", _wrap_MRAA_INTEL_EDISON_GP131, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP14", _wrap_MRAA_INTEL_EDISON_GP14, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP40", _wrap_MRAA_INTEL_EDISON_GP40, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP43", _wrap_MRAA_INTEL_EDISON_GP43, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP77", _wrap_MRAA_INTEL_EDISON_GP77, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP82", _wrap_MRAA_INTEL_EDISON_GP82, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP83", _wrap_MRAA_INTEL_EDISON_GP83, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP134", _wrap_MRAA_INTEL_EDISON_GP134, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP45", _wrap_MRAA_INTEL_EDISON_GP45, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP47", _wrap_MRAA_INTEL_EDISON_GP47, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP49", _wrap_MRAA_INTEL_EDISON_GP49, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP15", _wrap_MRAA_INTEL_EDISON_GP15, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP84", _wrap_MRAA_INTEL_EDISON_GP84, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP42", _wrap_MRAA_INTEL_EDISON_GP42, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP41", _wrap_MRAA_INTEL_EDISON_GP41, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP78", _wrap_MRAA_INTEL_EDISON_GP78, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP79", _wrap_MRAA_INTEL_EDISON_GP79, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP80", _wrap_MRAA_INTEL_EDISON_GP80, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "INTEL_EDISON_GP81", _wrap_MRAA_INTEL_EDISON_GP81, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN8", _wrap_MRAA_RASPBERRY_WIRING_PIN8, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN9", _wrap_MRAA_RASPBERRY_WIRING_PIN9, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN7", _wrap_MRAA_RASPBERRY_WIRING_PIN7, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN15", _wrap_MRAA_RASPBERRY_WIRING_PIN15, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN16", _wrap_MRAA_RASPBERRY_WIRING_PIN16, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN0", _wrap_MRAA_RASPBERRY_WIRING_PIN0, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN1", _wrap_MRAA_RASPBERRY_WIRING_PIN1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN2", _wrap_MRAA_RASPBERRY_WIRING_PIN2, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN3", _wrap_MRAA_RASPBERRY_WIRING_PIN3, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN4", _wrap_MRAA_RASPBERRY_WIRING_PIN4, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN5", _wrap_MRAA_RASPBERRY_WIRING_PIN5, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN12", _wrap_MRAA_RASPBERRY_WIRING_PIN12, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN13", _wrap_MRAA_RASPBERRY_WIRING_PIN13, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN6", _wrap_MRAA_RASPBERRY_WIRING_PIN6, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN14", _wrap_MRAA_RASPBERRY_WIRING_PIN14, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN10", _wrap_MRAA_RASPBERRY_WIRING_PIN10, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN11", _wrap_MRAA_RASPBERRY_WIRING_PIN11, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN17", _wrap_MRAA_RASPBERRY_WIRING_PIN17, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN21", _wrap_MRAA_RASPBERRY_WIRING_PIN21, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN18", _wrap_MRAA_RASPBERRY_WIRING_PIN18, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN19", _wrap_MRAA_RASPBERRY_WIRING_PIN19, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN22", _wrap_MRAA_RASPBERRY_WIRING_PIN22, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN20", _wrap_MRAA_RASPBERRY_WIRING_PIN20, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN26", _wrap_MRAA_RASPBERRY_WIRING_PIN26, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN23", _wrap_MRAA_RASPBERRY_WIRING_PIN23, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN24", _wrap_MRAA_RASPBERRY_WIRING_PIN24, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN27", _wrap_MRAA_RASPBERRY_WIRING_PIN27, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN25", _wrap_MRAA_RASPBERRY_WIRING_PIN25, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN28", _wrap_MRAA_RASPBERRY_WIRING_PIN28, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "RASPBERRY_WIRING_PIN29", _wrap_MRAA_RASPBERRY_WIRING_PIN29, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SUCCESS", _wrap_MRAA_SUCCESS, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_FEATURE_NOT_IMPLEMENTED", _wrap_MRAA_ERROR_FEATURE_NOT_IMPLEMENTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_FEATURE_NOT_SUPPORTED", _wrap_MRAA_ERROR_FEATURE_NOT_SUPPORTED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_INVALID_VERBOSITY_LEVEL", _wrap_MRAA_ERROR_INVALID_VERBOSITY_LEVEL, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_INVALID_PARAMETER", _wrap_MRAA_ERROR_INVALID_PARAMETER, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_INVALID_HANDLE", _wrap_MRAA_ERROR_INVALID_HANDLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_NO_RESOURCES", _wrap_MRAA_ERROR_NO_RESOURCES, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_INVALID_RESOURCE", _wrap_MRAA_ERROR_INVALID_RESOURCE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_INVALID_QUEUE_TYPE", _wrap_MRAA_ERROR_INVALID_QUEUE_TYPE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_NO_DATA_AVAILABLE", _wrap_MRAA_ERROR_NO_DATA_AVAILABLE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_INVALID_PLATFORM", _wrap_MRAA_ERROR_INVALID_PLATFORM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_PLATFORM_NOT_INITIALISED", _wrap_MRAA_ERROR_PLATFORM_NOT_INITIALISED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_PLATFORM_ALREADY_INITIALISED", _wrap_MRAA_ERROR_PLATFORM_ALREADY_INITIALISED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "ERROR_UNSPECIFIED", _wrap_MRAA_ERROR_UNSPECIFIED, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_VALID", _wrap_MRAA_PIN_VALID, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_GPIO", _wrap_MRAA_PIN_GPIO, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_PWM", _wrap_MRAA_PIN_PWM, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_FAST_GPIO", _wrap_MRAA_PIN_FAST_GPIO, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_SPI", _wrap_MRAA_PIN_SPI, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_I2C", _wrap_MRAA_PIN_I2C, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_AIO", _wrap_MRAA_PIN_AIO, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "PIN_UART", _wrap_MRAA_PIN_UART, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "I2C_STD", _wrap_MRAA_I2C_STD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "I2C_FAST", _wrap_MRAA_I2C_FAST, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "I2C_HIGH", _wrap_MRAA_I2C_HIGH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "UART_PARITY_NONE", _wrap_MRAA_UART_PARITY_NONE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "UART_PARITY_EVEN", _wrap_MRAA_UART_PARITY_EVEN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "UART_PARITY_ODD", _wrap_MRAA_UART_PARITY_ODD, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "UART_PARITY_MARK", _wrap_MRAA_UART_PARITY_MARK, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "UART_PARITY_SPACE", _wrap_MRAA_UART_PARITY_SPACE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MODE_STRONG", _wrap_mraa_MODE_STRONG, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MODE_PULLUP", _wrap_mraa_MODE_PULLUP, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MODE_PULLDOWN", _wrap_mraa_MODE_PULLDOWN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "MODE_HIZ", _wrap_mraa_MODE_HIZ, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DIR_OUT", _wrap_mraa_DIR_OUT, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DIR_IN", _wrap_mraa_DIR_IN, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DIR_OUT_HIGH", _wrap_mraa_DIR_OUT_HIGH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "DIR_OUT_LOW", _wrap_mraa_DIR_OUT_LOW, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EDGE_NONE", _wrap_mraa_EDGE_NONE, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EDGE_BOTH", _wrap_mraa_EDGE_BOTH, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EDGE_RISING", _wrap_mraa_EDGE_RISING, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "EDGE_FALLING", _wrap_mraa_EDGE_FALLING, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "edge", _wrap_Gpio_edge);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "isr", _wrap_Gpio_isr);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "isrExit", _wrap_Gpio_isrExit);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "mode", _wrap_Gpio_mode);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "dir", _wrap_Gpio_dir);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "read", _wrap_Gpio_read);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "write", _wrap_Gpio_write);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "useMmap", _wrap_Gpio_useMmap);
SWIGV8_AddMemberFunction(_exports_Gpio_class, "getPin", _wrap_Gpio__wrap_Gpio_getPin);
SWIGV8_AddMemberFunction(_exports_I2c_class, "frequency", _wrap_I2c_frequency);
SWIGV8_AddMemberFunction(_exports_I2c_class, "address", _wrap_I2c_address);
SWIGV8_AddMemberFunction(_exports_I2c_class, "readByte", _wrap_I2c_readByte);
SWIGV8_AddMemberFunction(_exports_I2c_class, "read", _wrap_I2c_read);
SWIGV8_AddMemberFunction(_exports_I2c_class, "readReg", _wrap_I2c_readReg);
SWIGV8_AddMemberFunction(_exports_I2c_class, "readWordReg", _wrap_I2c_readWordReg);
SWIGV8_AddMemberFunction(_exports_I2c_class, "readBytesReg", _wrap_I2c_readBytesReg);
SWIGV8_AddMemberFunction(_exports_I2c_class, "writeByte", _wrap_I2c_writeByte);
SWIGV8_AddMemberFunction(_exports_I2c_class, "write", _wrap_I2c_write);
SWIGV8_AddMemberFunction(_exports_I2c_class, "writeReg", _wrap_I2c_writeReg);
SWIGV8_AddMemberFunction(_exports_I2c_class, "writeWordReg", _wrap_I2c_writeWordReg);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "write", _wrap_Pwm_write);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "read", _wrap_Pwm_read);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "period", _wrap_Pwm_period);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "period_ms", _wrap_Pwm_period_ms);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "period_us", _wrap_Pwm_period_us);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "pulsewidth", _wrap_Pwm_pulsewidth);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "pulsewidth_ms", _wrap_Pwm_pulsewidth_ms);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "pulsewidth_us", _wrap_Pwm_pulsewidth_us);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "enable", _wrap_Pwm_enable);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "config_ms", _wrap_Pwm_config_ms);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "config_percent", _wrap_Pwm_config_percent);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "max_period", _wrap_Pwm_max_period);
SWIGV8_AddMemberFunction(_exports_Pwm_class, "min_period", _wrap_Pwm_min_period);
SWIGV8_AddStaticVariable(exports_obj, "SPI_MODE0", _wrap_mraa_SPI_MODE0, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SPI_MODE1", _wrap_mraa_SPI_MODE1, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SPI_MODE2", _wrap_mraa_SPI_MODE2, JS_veto_set_variable);
SWIGV8_AddStaticVariable(exports_obj, "SPI_MODE3", _wrap_mraa_SPI_MODE3, JS_veto_set_variable);
SWIGV8_AddMemberFunction(_exports_Spi_class, "mode", _wrap_Spi_mode);
SWIGV8_AddMemberFunction(_exports_Spi_class, "frequency", _wrap_Spi_frequency);
SWIGV8_AddMemberFunction(_exports_Spi_class, "writeByte", _wrap_Spi_writeByte);
SWIGV8_AddMemberFunction(_exports_Spi_class, "write_word", _wrap_Spi_write_word);
SWIGV8_AddMemberFunction(_exports_Spi_class, "write", _wrap_Spi_write);
SWIGV8_AddMemberFunction(_exports_Spi_class, "lsbmode", _wrap_Spi_lsbmode);
SWIGV8_AddMemberFunction(_exports_Spi_class, "bitPerWord", _wrap_Spi_bitPerWord);
SWIGV8_AddMemberFunction(_exports_Aio_class, "read", _wrap_Aio_read);
SWIGV8_AddMemberFunction(_exports_Aio_class, "readFloat", _wrap_Aio_readFloat);
SWIGV8_AddMemberFunction(_exports_Aio_class, "setBit", _wrap_Aio_setBit);
SWIGV8_AddMemberFunction(_exports_Aio_class, "getBit", _wrap_Aio_getBit);
SWIGV8_AddMemberFunction(_exports_Uart_class, "getDevicePath", _wrap_Uart_getDevicePath);
SWIGV8_AddMemberFunction(_exports_Uart_class, "read", _wrap_Uart_read);
SWIGV8_AddMemberFunction(_exports_Uart_class, "write", _wrap_Uart_write);
SWIGV8_AddMemberFunction(_exports_Uart_class, "readStr", _wrap_Uart_readStr);
SWIGV8_AddMemberFunction(_exports_Uart_class, "writeStr", _wrap_Uart_writeStr);
SWIGV8_AddMemberFunction(_exports_Uart_class, "dataAvailable", _wrap_Uart__wrap_Uart_dataAvailable);
SWIGV8_AddMemberFunction(_exports_Uart_class, "flush", _wrap_Uart_flush);
SWIGV8_AddMemberFunction(_exports_Uart_class, "setBaudRate", _wrap_Uart_setBaudRate);
SWIGV8_AddMemberFunction(_exports_Uart_class, "setMode", _wrap_Uart_setMode);
SWIGV8_AddMemberFunction(_exports_Uart_class, "setFlowcontrol", _wrap_Uart_setFlowcontrol);
SWIGV8_AddMemberFunction(_exports_Uart_class, "setTimeout", _wrap_Uart_setTimeout);


  /* setup inheritances */
  

  /* class instances */
  /* Class: uint8Array (_exports_uint8Array) */
v8::Handle<v8::FunctionTemplate> _exports_uint8Array_class_0 = SWIGV8_CreateClassTemplate("uint8Array");
_exports_uint8Array_class_0->SetCallHandler(_wrap_new_uint8Array);
_exports_uint8Array_class_0->Inherit(_exports_uint8Array_class);
_exports_uint8Array_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_uint8Array_obj = _exports_uint8Array_class_0->GetFunction();
/* Class: Gpio (_exports_Gpio) */
v8::Handle<v8::FunctionTemplate> _exports_Gpio_class_0 = SWIGV8_CreateClassTemplate("Gpio");
_exports_Gpio_class_0->SetCallHandler(_wrap_new_Gpio);
_exports_Gpio_class_0->Inherit(_exports_Gpio_class);
_exports_Gpio_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Gpio_obj = _exports_Gpio_class_0->GetFunction();
/* Class: I2c (_exports_I2c) */
v8::Handle<v8::FunctionTemplate> _exports_I2c_class_0 = SWIGV8_CreateClassTemplate("I2c");
_exports_I2c_class_0->SetCallHandler(_wrap_new_I2c);
_exports_I2c_class_0->Inherit(_exports_I2c_class);
_exports_I2c_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_I2c_obj = _exports_I2c_class_0->GetFunction();
/* Class: Pwm (_exports_Pwm) */
v8::Handle<v8::FunctionTemplate> _exports_Pwm_class_0 = SWIGV8_CreateClassTemplate("Pwm");
_exports_Pwm_class_0->SetCallHandler(_wrap_new_Pwm);
_exports_Pwm_class_0->Inherit(_exports_Pwm_class);
_exports_Pwm_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Pwm_obj = _exports_Pwm_class_0->GetFunction();
/* Class: Spi (_exports_Spi) */
v8::Handle<v8::FunctionTemplate> _exports_Spi_class_0 = SWIGV8_CreateClassTemplate("Spi");
_exports_Spi_class_0->SetCallHandler(_wrap_new_Spi);
_exports_Spi_class_0->Inherit(_exports_Spi_class);
_exports_Spi_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Spi_obj = _exports_Spi_class_0->GetFunction();
/* Class: Aio (_exports_Aio) */
v8::Handle<v8::FunctionTemplate> _exports_Aio_class_0 = SWIGV8_CreateClassTemplate("Aio");
_exports_Aio_class_0->SetCallHandler(_wrap_new_Aio);
_exports_Aio_class_0->Inherit(_exports_Aio_class);
_exports_Aio_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Aio_obj = _exports_Aio_class_0->GetFunction();
/* Class: Uart (_exports_Uart) */
v8::Handle<v8::FunctionTemplate> _exports_Uart_class_0 = SWIGV8_CreateClassTemplate("Uart");
_exports_Uart_class_0->SetCallHandler(_wrap_new_Uart);
_exports_Uart_class_0->Inherit(_exports_Uart_class);
_exports_Uart_class_0->SetHiddenPrototype(true);
v8::Handle<v8::Object> _exports_Uart_obj = _exports_Uart_class_0->GetFunction();


  /* add static class functions and variables */
  SWIGV8_AddStaticFunction(_exports_uint8Array_obj, "frompointer", _wrap_uint8Array_frompointer);
SWIGV8_AddStaticFunction(exports_obj, "init", _wrap_init);
SWIGV8_AddStaticFunction(exports_obj, "getVersion", _wrap_getVersion);
SWIGV8_AddStaticFunction(exports_obj, "setPriority", _wrap_setPriority);
SWIGV8_AddStaticFunction(exports_obj, "getPlatformType", _wrap_getPlatformType);
SWIGV8_AddStaticFunction(exports_obj, "printError", _wrap_printError);
SWIGV8_AddStaticFunction(exports_obj, "pinModeTest", _wrap_pinModeTest);
SWIGV8_AddStaticFunction(exports_obj, "adcRawBits", _wrap_adcRawBits);
SWIGV8_AddStaticFunction(exports_obj, "adcSupportedBits", _wrap_adcSupportedBits);
SWIGV8_AddStaticFunction(exports_obj, "getPlatformName", _wrap_getPlatformName);
SWIGV8_AddStaticFunction(exports_obj, "getPinCount", _wrap_getPinCount);
SWIGV8_AddStaticFunction(exports_obj, "getPinName", _wrap_getPinName);
SWIGV8_AddStaticFunction(exports_obj, "setLogLevel", _wrap_setLogLevel);
SWIGV8_AddStaticFunction(_exports_Gpio_obj, "v8isr", _wrap_Gpio_v8isr);
SWIGV8_AddStaticFunction(_exports_Gpio_obj, "nop", _wrap_Gpio_nop);
SWIGV8_AddStaticFunction(_exports_Gpio_obj, "uvwork", _wrap_Gpio_uvwork);


  /* register classes */
  exports_obj->Set(SWIGV8_SYMBOL_NEW("uint8Array"), _exports_uint8Array_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Gpio"), _exports_Gpio_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("I2c"), _exports_I2c_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Pwm"), _exports_Pwm_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Spi"), _exports_Spi_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Aio"), _exports_Aio_obj);
exports_obj->Set(SWIGV8_SYMBOL_NEW("Uart"), _exports_Uart_obj);


  /* create and register namespace objects */
  
}

#if defined(BUILDING_NODE_EXTENSION)
NODE_MODULE(mraa, mraa_initialize)
#endif
